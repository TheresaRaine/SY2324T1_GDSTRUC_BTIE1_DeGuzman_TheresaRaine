class Student {
    private int id;
    private String name;

    public Student(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        return name.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        Student student = (Student) obj;
        return name.equals(student.name);
    }

    @Override
    public String toString() {
        return "Student{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }
}

class LinearProbingHashTable {
    private Student[] table;
    private int size;

    public LinearProbingHashTable(int capacity) {
        table = new Student[capacity];
        size = 0;
    }

    public void put(String key, Student student) {
        int index = hash(key);
        while (table[index] != null) {
            if (table[index].getName().equals(key)) {
                // Key exists, update the value
                table[index] = student;
                return;
            }
            index = (index + 1) % table.length; // Linear probing
        }
        table[index] = student;
        size++;
    }

    public Student get(String key) {
        int index = hash(key);
        while (table[index] != null) {
            if (table[index].getName().equals(key)) {
                return table[index];
            }
            index = (index + 1) % table.length; // Linear probing
        }
        return null;
    }

    public void remove(String key) {
        int index = hash(key);
        while (table[index] != null) {
            if (table[index].getName().equals(key)) {
                table[index] = null;
                size--;
                rehash(index); // Rehash to fix the gap
                return;
            }
            index = (index + 1) % table.length; // Linear probing
        }
    }

    private void rehash(int startIndex) {
        int index = (startIndex + 1) % table.length; // Move to the next slot
        while (table[index] != null) {
            Student student = table[index];
            table[index] = null;
            size--;
            put(student.getName(), student);
            index = (index + 1) % table.length; // Linear probing
        }
    }

    private int hash(String key) {
        return Math.abs(key.hashCode()) % table.length;
    }

    public void printHashTable() {
        for (int i = 0; i < table.length; i++) {
            if (table[i] != null) {
                System.out.println("Index " + i + ": " + table[i]);
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        LinearProbingHashTable hashtable = new LinearProbingHashTable(10);
        hashtable.put("AJ Astilla", new Student(1, "AJ Astilla"));
        hashtable.put("Ayran Gauna", new Student(2, "Ayran Gauna"));
        hashtable.put("Neal Padama", new Student(3, "Neal Padama"));
        hashtable.put("Gigette Tria", new Student(4, "Gigette Tria"));
        hashtable.put("Patrick Monzon", new Student(5, "Patrick Monzon"));

        hashtable.printHashTable();

        System.out.println("\nGetting element from hashtable with key: Neal Padama");
        Student retrievedStudent = hashtable.get("Neal Padama");
        if (retrievedStudent != null) {
            System.out.println(retrievedStudent);
        } else {
            System.out.println("Student not found.");
        }

        System.out.println("\nRemoving element with key: Ayran Gauna");
        hashtable.remove("Ayran Gauna");
        hashtable.printHashTable();
    }
}
